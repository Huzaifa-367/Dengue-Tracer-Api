<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	
	<PropertyGroup>
		<UnoUIMSBuildTasksPath Condition="'$(UnoUIMSBuildTasksPath)'==''">Uno.UI.Tasks</UnoUIMSBuildTasksPath>
	</PropertyGroup>

	<UsingTask AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.vfacdc38cd5d06f2dc1dbd8b7360079525999989f.dll" TaskName="Uno.UI.Tasks.WinAppSDKValidations.ValidateWinAppSDKReferences_vfacdc38cd5d06f2dc1dbd8b7360079525999989f" />

	<PropertyGroup>
		<_UnoRemoveReferences_BeforeTargets>
			$(_UnoRemoveReferences_BeforeTargets);
			FindReferenceAssembliesForReferences;
			MarkupCompilePass1;
		</_UnoRemoveReferences_BeforeTargets>
	</PropertyGroup>

	<Target Name="_UnoRemoveReferences"
			BeforeTargets="$(_UnoRemoveReferences_BeforeTargets)">
		<ItemGroup>
			<_UnoReferencePathToRemove
				Include="@(ReferencePath)"
				Condition="'%(ReferencePath.NuGetPackageId)'=='Uno.UI' or '%(ReferencePath.NuGetPackageId)'=='Uno.WinUI'" />

			<!-- Remove all uno references -->
			<ReferencePath Remove="@(_UnoReferencePathToRemove)" />
			<ReferenceCopyLocalPaths Remove="@(_UnoReferencePathToRemove)" />

			<!-- Clear items -->
			<_UnoReferencePathToRemove Remove="@(_UnoReferencePathToRemove)" />
		</ItemGroup>

		<ItemGroup Condition="'$(PkgUno_WinUI)'!=''">
			<!-- This must be aligned with $winuisourcepath$ in the nuspec -->
			<ReferencePath Include="$(PkgUno_WinUI)/lib/net5.0-windows10.0.18362.0/*.dll" />
			<ReferenceCopyLocalPaths Include="$(PkgUno_WinUI)/lib/net5.0-windows10.0.18362.0/*.dll" />
		</ItemGroup>

		<ItemGroup Condition="'$(PkgUno_UI)'!=''">
			<!-- This must be aligned with $winuisourcepath$ in the nuspec -->
			<ReferencePath Include="$(PkgUno_UI)/lib/net5.0-windows10.0.18362.0/*.dll" />
			<ReferenceCopyLocalPaths Include="$(PkgUno_UI)/lib/net5.0-windows10.0.18362.0/*.dll" />
		</ItemGroup>
	</Target>

	<Target Name="_UnoIncludeUIToolkit"
			BeforeTargets="$(_UnoRemoveReferences_BeforeTargets)">
		
		<!-- 
		Since we're not using the standard packaging mechanism, the Uno.UI.Toolkit resources
		need to be included explicitly.
		-->
		
		<ItemGroup>
			<PriOutputs Include="$(PkgUno_WinUI)/lib/net5.0-windows10.0.18362.0/Uno.UI.Toolkit.pri"
						TargetPath="Uno.UI.Toolkit.pri"
						CopyLocal="True"
						CopyToOutputDirectory="PreserveNewest"
						OutputGroup="CopyLocalFilesOutputGroup" />

			<_UnoUIToolkitAssets Include="$(PkgUno_WinUI)/lib/net5.0-windows10.0.18362.0/Uno.UI.Toolkit/**"/>

			<None
				Include="@(_UnoUIToolkitAssets)"
				TargetPath="Uno.UI.Toolkit/%(RecursiveDir)%(Filename)%(Extension)"
				CopyToOutputDirectory="PreserveNewest" />

			<_UnoUIToolkitAssets Remove="@(_UnoUIToolkitAssets)" />
		</ItemGroup>

	</Target>

	<Target Name="_FindInvalidWinAppSDKUnoPlatformReference"
			BeforeTargets="ResolveAssemblyReferences"
			Condition="'$(UnoDisableUNOB0002Validation)'!='true'">

		<!--
		Determine if any ProjectReference contains AdditionalProperties which contains _IsUnoPlatform, a property
		defined only when WinAppSDK is not included.

		This scenario can happen when a WinAppSDK project is referencing a net7.0-only project which contains a reference to
		Uno.WinUI, which is not compatible with WinAppSDK. Fixing this requires adding a netX.0-windows10.x target to the project.
		-->
		<ValidateWinAppSDKReferences_vfacdc38cd5d06f2dc1dbd8b7360079525999989f ReferencedProjects="@(TargetPathWithTargetPlatformMoniker)" />
	</Target>

	<PropertyGroup Condition=" '$(_ExtrasSdkHasDesktopAppSupport)'==''">
		<TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_UnoSdkIncludeWindowsLibraryLayoutItems</TargetsForTfmSpecificContentInPackage>
	</PropertyGroup>

	<!-- source https://github.com/novotnyllc/MSBuildSdkExtras/blob/b58e1d25b530e02ce4d1b937ccf99082019cdc47/Source/MSBuild.Sdk.Extras/Build/Workarounds.targets#L89 -->
	<Target Name="_UnoSdkIncludeWindowsLibraryLayoutItems"
		DependsOnTargets="PrepareLibraryLayout"
		Condition="'$(GenerateLibraryLayout)' == 'true' AND '$(SDKIdentifier)' == 'Windows' AND '$(_ExtrasSdkHasDesktopAppSupport)'==''">
		<ItemGroup>
		<TfmSpecificPackageFile Include="@(_LayoutFile)"
								Condition="'$(ProjectName)' == '%(_LayoutFile.ProjectName)'"
								PackagePath="lib\$(TargetFramework)\%(_LayoutFile.TargetPath)"/>
		</ItemGroup>
	</Target>

</Project>
